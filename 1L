import numpy as np
from numpy import linalg as LA
import scipy as sp 
import matplotlib.pyplot as plt
import math 
import pylab
from matplotlib import mlab

v = np.matrix('1 1 1 1')
I = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
tao1 = 10
Atao1 = np.matrix('-0.007 0.444	0 0; 0.0142	-0.167 0 0; 0 0	-0.00353 0; 0 1	0 0')
Btao1 = np.matrix('0.0158	0;0.0084 0; 0 0.1; 0 0')
Ftao1 = np.matrix('0.001 0 0; 0 0.00017 0;0 0 0.01;0 0 0')
tao2=25
Atao2 = np.matrix('-0.007	0.444	0	0; 0.0185	-0.192	0	0; 0	0	-0.04	0; 0	1	0	0')
Btao2 = np.matrix('0.0184	0;0.0108	0;0	0.087;0	0')

Ftao2=np.matrix('0.001	0	0;0	0.00018 0;0	0 0.0101; 0	0	0')
tao3=60
Atao3=np.matrix('-0.007	0.444	0	0;0.0244	-0.22	0	0;0	0	-0.046	0;0	1	0	0')

Btao3=np.matrix('0.021	0;0.0146	0;0	0.076;0	0') 

Ftao3=np.matrix('0.001	0	0;0	0.0002 0;0	0	0.0103;0	0	0')
tao=np.matrix('10 25 60')
A21=np.matrix('0.0142 0.0185 0.0244')
A22=np.matrix('-0.167 -0.192 -0.220')
A33=np.matrix('-0.0353 -0.04 -0.046')
B11=np.matrix('0.0158 0.0184 0.021')
B21=np.matrix('0.0084 0.0108 0.0146')
B32=np.matrix('0.1 0.087 0.076')
F22=np.matrix('0.00017 0.00018 0.0002')
F33=np.matrix('0.01 0.0101 0.0103')
delta_t=0.1
N = 600

def zeros(n):
	return [0]*n

def L(arr):
	result=[]
	for k in range(N):
		t=k*0.1
		s=0
		for i in range(3):
			m=1
			for j in range(3):
				if i!=j:
					#print((t-tao[0,j])/(tao[0,i]-tao[0,j]))
					m=m*(t-tao[0,j])/(tao[0,i]-tao[0,j])
			#print(m)
			s=s+arr[0,i]*m
		#print('s=',s)
		result.append(s)
	return result



L2A21 = L(A21)
L2A22 = L(A22)
L2A33 = L(A33)
L2B11 = L(B11)
L2B21 = L(B21)
L2B32 = L(B32)
L2F22 = L(F22)
L2F33 = L(F33)

I = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
x0 = np.matrix('0; 0; 0; 0.25')
xo0 = np.matrix('0; 0; 0; 0.15')
H = np.matrix('1 0 0 0; 0 1 0 0;0 0 1 0;   0 0 0 1')
x = x0
xo = xo0
u = np.matrix('0; 0')
Px0 = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
P = Px0
D = np.matrix('1 0; 0 1')
uMin1 = -0.61
uMax1 = 0.61
uMin2 = -0.01
uMax2 = 0.01
e = 0.01
N = 600
G0 = I
norma = 1
C = np.matrix('0.00008 0 0 0; 0 0.01 0 0; 0 0 0.04 0; 0 0 0 65370')
R = np.matrix('0.00004 0 0 0; 0 0.000025 0 0; 0 0 0.01 0; 0 0 0 0.0015')

while norma > e: 
	G1 = (Atao1.transpose()*G0*Atao1-Atao1.transpose()*G0*Btao1*LA.matrix_power(Btao1.transpose()*G0*Btao1+D, -1)*Btao1.transpose()*G0*Atao1+C-G0)*delta_t+G0
	norma = LA.norm(G1-G0)/LA.norm(G1)
	G0 = G1
RIC = G0

u1 = []
u2 = []
x1 = []
x2 = []
x3 = []
x4 = []
xo1 = []
xo2 = []
xo3 = []
xo4 = []

for i in range (N):
	At = np.array([[-0.007, 0.444, 0, 0],[ L2A21[i], L2A22[i], 0, 0],[0, 0, L2A33[i], 0],[ 0, 1, 0, 0]])
	A = I*0.1*At
	Bt = np.array([[L2B11[i], 0], [L2B21[i], 0], [0, L2B32[i]],[0, 0]])
	B = 0.1*Bt
	Ft = np.matrix([[0.001, 0, 0],[0, L2F22[i], 0], [0, 0, L2F33[i]], [0, 0, 0]])
	F = math.sqrt(0.1)*Ft

	xz = np.array([[0],[0], [0], [0.25 -(i*0.45/N)]])
	u = -(LA.matrix_power(B.transpose() * RIC * B + D, -1)) * B.transpose() * RIC * A * (xo-xz)
	
	if u[0,0] < uMin1:
		u[0,0] = uMin1
	if u[0,0] > uMax1:
		u[0,0] = uMax1
	if u[1,0] < uMin2:
		u[1,0] = uMin2
	if u[1,0] > uMax2:
		u[1,0] = uMax2

	xk1 = A*x+B*u+F*np.random.normal(0, 1, (3,1))
	y = H*xk1+H*[[np.random.normal(0,math.sqrt(R[0,0]))],[np.random.normal(0,math.sqrt(R[1,1]))],[np.random.normal(0,math.sqrt(R[2,2]))],[np.random.normal(0,math.sqrt(R[3,3]))]]
	x = xk1
	xk = A*xo+B*u
	Pk = A*P*A.transpose()+F*F.transpose()
	K = Pk*H.transpose()*LA.matrix_power(H*Pk*H.transpose()+H*R*H.transpose() , -1)
	Pk1 = (np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1') - K * H ) * Pk
	xok1 = xk+K*(y-H*xk)
	xo = xok1
	u1.append(u[0,0])
	u2.append(u[1,0])
	x1.append(x[0,0])
	x2.append(x[1,0])
	x3.append(x[2,0])
	x4.append(x[3,0])
	xo1.append(xo[0,0])
	xo2.append(xo[1,0])
	xo3.append(xo[2,0])
	xo4.append(xo[3,0])


xmin = 0
xmax = N
dx = 1
pylab.subplot (2, 4, 1)
pylab.plot ( u1)
pylab.title ("u11")

pylab.subplot (2, 4, 2)
pylab.plot ( u2)
pylab.title ("u11")

pylab.subplot (2, 4, 5)
pylab.plot ( xo1)
pylab.plot ( x1)


pylab.title ("x1, xo1")

pylab.subplot (2, 4, 6)
pylab.plot ( xo2)
pylab.plot ( x2)
pylab.title ("x2, xo2")

pylab.subplot (2, 4, 7)
pylab.plot ( x3)
pylab.plot ( xo3)
pylab.title ("x3, xo3")

pylab.subplot (2, 4, 8)
pylab.plot ( xo4)
pylab.plot ( x4)
pylab.title ("x4, xo4")

pylab.show()
