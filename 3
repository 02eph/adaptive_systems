import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from numpy import linalg as LA
import scipy as sp 
import math 
import pylab
from matplotlib import mlab

v = np.matrix('1 1 1 1')
I = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
delta_t=0.1
Atao1 = np.matrix('-0.007 0.4436 0 0; 0.0142 -0.167 0 0; 0 0	-0.00356 0; 0 1	0 0')
Btao1 = np.matrix('0.0161	0;0.0085 0; 0 0.97; 0 0')
Ftao1 = np.matrix('0.001 0 0; 0 0.00017 0;0 0 0.01;0 0 0')
A = I+delta_t*Atao1
B = delta_t*Btao1
F = math.sqrt(delta_t)*Ftao1
N = 800
I = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
x0 = np.matrix('0; 0; 0; 0.25')
xo0 = np.matrix('0; 0; 0; 0.15')
H = np.matrix('1 0 0 0; 0 1 0 0; 0 0 0 1')
x = x0
xo = xo0
u = np.matrix('0; 0')
Px0 = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
P = Px0
D = np.matrix('1 0; 0 1')
uMin1 = -0.61
uMax1 = 0.61
uMin2 = -0.01
uMax2 = 0.01
e = 0.01
G0 = I
norma = 1
C = np.matrix('0.0001 0 0 0; 0 0.01 0 0; 0 0 0.004 0; 0 0 0 27000')
R = np.matrix('0.00004 0 0 0; 0 0.000025 0 0; 0 0 0.01 0; 0 0 0 0.0015')
Ptheta0 = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
theta = np.matrix('0.044; 0.00142; 0.00161; 0')
Ptheta = Ptheta0
while norma > e: 
	G1=(A.transpose()*G0*A-A.transpose()*G0*B*LA.matrix_power(B.transpose()*G0*B+D, -1) * B.transpose() * G0 * A + C-G0) * delta_t+G0
	norma = LA.norm(G1-G0) / LA.norm(G1)
	G0 = G1
RIC = G0
print("решение рикатти" , RIC)
u1 = []
u2 = []
x1 = []
x2 = []
x3 = []
x4 = []
xo1 = []
xo2 = []
xo3 = []
xo4 = []
theta1 = []
theta2 = []
theta3 = []
theta4 = []

for i in range (N):
	xz = np.array([[0],[0], [0], [0.25 -(i*0.45/N)]])
	Atheta = np.array([[0.999, theta[0,0]*delta_t, 0, 0],[ theta[1,0]*delta_t, 0.983, 0, 0],[0, 0, 1, 0],[ 0, 0.1, 0, 1]])
	Btheta = np.array([[theta[2,0]*delta_t, theta[3,0]*delta_t], [0.00085, 0], [0,0.097 ],[0, 0]])

	u = -(LA.matrix_power(Btheta.transpose()*RIC*Btheta+D, -1))*Btheta.transpose()*RIC*Atheta*(xo-xz)
	
	if u[0,0] < uMin1:
		u[0,0] = uMin1
	if u[0,0] > uMax1:
		u[0,0] = uMax1
	if u[1,0] < uMin2:
		u[1,0] = uMin2
	if u[1,0] > uMax2:
		u[1,0] = uMax2

	xk1 = A*x+B*u+F*np.random.normal(0, 1, (3,1))
	y = H*xk1+H*[[np.random.normal(0,math.sqrt(R[0,0]))],[np.random.normal(0,math.sqrt(R[1,1]))],[np.random.normal(0,math.sqrt(R[2,2]))],[np.random.normal(0,math.sqrt(R[3,3]))]]
	x = xk1
	xk = Atheta*xo+Btheta*u
	Pk = Atheta*P*Atheta.transpose()+F*F.transpose()
	K = Pk*H.transpose()*LA.matrix_power(H*Pk*H.transpose()+H*R*H.transpose() , -1)
	Pk1 = (np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1') - K * H ) * Pk
	phi = np.array([[delta_t*xo[1,0], 0, delta_t*u[0,0], delta_t*u[1,0]],[0, delta_t*xo[0,0], 0, 0],[0,0,0,0],[0,0,0,0]])
	xok1 = xk+K*(y-H*xk)
	f =  Atheta*xok1+Btheta*u-phi*theta
	xo = xok1
	M = H*phi*Ptheta*phi.transpose()*H.transpose()+H*F*F.transpose()*H.transpose()+H*R*H.transpose()
	L = Ptheta*phi.transpose()*H.transpose()*LA.matrix_power(M, -1)
	Ptheta = np.matrix('1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1')
	theta = theta+L*(y-H*phi*theta-H*f)
	
	u1.append(u[0,0])
	u2.append(u[1,0])
	x1.append(x[0,0])
	x2.append(x[1,0])
	x3.append(x[2,0])
	x4.append(x[3,0])
	xo1.append(xo[0,0])
	xo2.append(xo[1,0])
	xo3.append(xo[2,0])
	xo4.append(xo[3,0])
	theta1.append(theta[0,0])
	theta2.append(theta[1,0])
	theta3.append(theta[2,0])
	theta4.append(theta[3,0])

X = np.linspace(0.0, 800.0, 10)
pylab.subplot (3, 4, 1)
pylab.plot ( u1)
pylab.title ("u11")

pylab.subplot (3, 4, 2)
pylab.plot ( u2)
pylab.title ("u11")

pylab.subplot (3, 4, 5)
pylab.plot ( xo1)
pylab.plot ( x1)
Y1 = -0.26*X/X
Y2 = 0.26*X/X
Y3 = 0*X/X
lines = plt.plot(X, Y1, X, Y2, X,Y3)
plt.setp(lines, color = 'red',  linestyle = '--', linewidth = 1)
pylab.title ("x1, xo1")

pylab.subplot (3, 4, 6)
pylab.plot ( xo2)
pylab.plot ( x2)
Y1 = -0.0174*X/X
Y2 = 0.0174*X/X
Y3 = 0*X/X
lines = plt.plot(X, Y1, X, Y2, X,Y3)
plt.setp(lines, color = 'red',  linestyle = '--', linewidth = 1)
pylab.title ("x2, xo2")

pylab.subplot (3, 4, 7)
pylab.plot ( xo3)
pylab.plot ( x3)
Y1 = -0.5*X/X
Y2 = 0.5*X/X
Y3 = 0*X/X
lines = plt.plot(X, Y1, X, Y2, X,Y3)
plt.setp(lines, color = 'red',  linestyle = '--', linewidth = 1)
pylab.title ("x3, xo3")

pylab.subplot (3, 4, 8)
pylab.plot ( xo4)
pylab.plot ( x4)

pylab.title ("x4, xo4")
pylab.subplot (3, 4, 9)
pylab.plot ( theta1)
Y1 = 0.0142*X/X
lines = plt.plot(X, Y1)
plt.setp(lines, color = 'red',  linestyle = '--', linewidth = 1)

pylab.subplot (3, 4, 10)
pylab.plot ( theta2)
Y1 = -0.00356*X/X
lines = plt.plot(X, Y1)
plt.setp(lines, color = 'red',  linestyle = '--', linewidth = 1)
pylab.subplot (3, 4, 11)
pylab.plot ( theta3)
Y1 = 1*X/X
lines = plt.plot(X, Y1)
plt.setp(lines, color = 'red',  linestyle = '--', linewidth = 1)
pylab.subplot (3, 4, 12)
pylab.plot ( theta4)
Y1 = 0*X/X
lines = plt.plot(X, Y1)
plt.setp(lines, color = 'red',  linestyle = '--', linewidth = 1)
pylab.show()



