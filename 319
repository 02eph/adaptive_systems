'''
стр 321 синтез управляющих воздействий по оценкам состояния
'''
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from numpy import linalg as LA
import scipy as sp 
import math 
import pylab
from matplotlib import mlab

H = np.matrix('1 0; 0 1')
R = np.matrix('0.32 0; 0 0.35')
xo0 = np.matrix('7; -1.3')
Px0 = np.matrix('1 0; 0 1')
An = np.matrix('0 1; -0.4 -1.4')
Bn = np.matrix('0; 1.3')
Fn = np.matrix('0.51 0; 0 0.55')
D = 1
x0 = np.matrix('10; -1') 
I = np.matrix('1 0 ; 0 1 ')
A = I+0.1*An
B = 0.1*Bn
F = math.sqrt(0.1)*Fn
delta_t = 0.1
Dd = delta_t*D
x=x0
e = 0.0001
G0 = I
D = 1  #ЧИСЛО А НЕ МАТРИЦА УБРАТЬ 10 из риккати Dd
C = np.matrix('1.5 0; 0 1.7')
Cd = C*delta_t

norma = 1
N = 100

S0 = np.matrix('0 0; 0 0 ')
S1 = A.transpose()*S0+S0*A-S0*B*10*B.transpose()*S0-S0+Cd
while (LA.norm(S1-S0)/LA.norm(S1) > e):
	S0 = S1
	S1 = A.transpose()*S0+S0*A-S0*B*10*B.transpose()*S0-S0+Cd
print(S1)

x = x0
xo = xo0
Px = Px0


u1 = []

x1 = []
x2 = []

xo1 = []
xo2 = []

for i in range (N):
	u = -10*B.transpose()*S1*x
	xk1 = A*x+B*u
	y = H*xk1+[[np.random.normal(0,math.sqrt(R[0,0]))],[np.random.normal(0,math.sqrt(R[1,1]))]]
	xok = A*xo+B*u+F*[[np.random.normal(0,1)],[np.random.normal(0,1)]]
	Pxk = A*Px*A.transpose()+F*F.transpose()
	K = Pxk*H.transpose()*LA.matrix_power(H*Pxk*H.transpose()+R ,-1)
	Px = (I-K*H)*Pxk
	xok1 = xok+K*(y-H*xok)
	x = xk1
	xo = xok1
	print(x)
	u1.append(u[0,0])
	
	x1.append(x[0,0])
	x2.append(x[1,0])

	xo1.append(xok[0,0])
	xo2.append(xok[1,0])




pylab.subplot (1, 1, 1)
pylab.plot ( u1)


pylab.subplot (1, 1, 1)
pylab.plot ( xo1)
pylab.subplot (1, 1, 1)
pylab.plot ( x1)


pylab.subplot (1, 1, 1)
pylab.plot ( xo2)
pylab.subplot (1, 1, 1)
pylab.plot ( x2)
pylab.show()


